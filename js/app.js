/*
     _            _                                                __         _                  
    | |          | |                                              / _|       | |                 
    | |_ __ _ ___| | _____   _ __ _   _ _ __   ___ _ __ ___  _ __| |_ _ __ __| |  _ __ ___   ___ 
    | __/ _` / __| |/ / __| | '__| | | | '_ \ / __| '_ ` _ \| '__|  _| '__/ _` | | '_ ` _ \ / _ \
    | || (_| \__ \   <\__ \_| |  | |_| | | | | (__| | | | | | |  | | | | | (_| |_| | | | | |  __/
     \__\__,_|___/_|\_\___(_)_|   \__, |_| |_|\___|_| |_| |_|_|  |_| |_|  \__,_(_)_| |_| |_|\___|
                                   __/ |                                                         
                                  |___/                                                          
       
                         (generated by http://patorjk.com/software/taag)
*/

// ------------------------------------------ Initializing ------------------------------------------

var currentList; //global variable for the currently selected tasklist

$('#formTitleTask, #formTitleList, #formItemTitleTask, #formItemTitleList, #formItemContentTask, #formItemContentList, #formSubmitTask, #formSubmitList').hide(); //hide all form elements. yes there are a lot.

if(localStorage.getItem('DarkMode') == 'true'){ //auto dark mode code
    $('#dark').prop('disabled', false)
    $('#darkModeToggle').prop('checked', true)
}
else if(localStorage.getItem('DarkMode') == 'false'){
    $('#dark').prop('disabled', true)
    $('#darkModeToggle').prop('checked', false)
}
$('#darkModeToggle').change(function() { //dark mode toggle button
    if(this.checked) {
        $('link[rel~="stylesheet"]#dark').prop('disabled', false)
        localStorage.setItem('DarkMode', 'true');
    } else{
        $('link[rel~="stylesheet"]#dark').prop('disabled', true)
        localStorage.setItem('DarkMode', 'false');
    }    
});

function startApp(){//function to be run on gapi completing loading
    if(tasks.auth.isLoggedIn()){ //if user has is logged in during a previous session
        
        loadDynamicContent(); //so that this function isn't the whole script
        createForms();

        $('#loader').fadeOut(); //finish loading screen
        $('main').fadeIn();
    } else{
        window.location.href = 'login'
    }
}

$('#task-list-title').change(function (){ //when the tasklist dropdown is changed
    currentList = $(this).val();
    $('div.container').hide();
    $('div.container#'+currentList).show();
});

// ------------------------------------------ Spinoff Functions ( called by startApp() ) ------------------------------------------

function loadDynamicContent(){
    
    // ------------------------------------------ API Request to get all user tasklists ------------------------------------------

    tasks.taskLists.get(function(taskLists) {
        for(var i=0; i < taskLists.length; i++){

            $('#task-wrapper').append('<div class="container" id="'+taskLists[i].id+'"></div>'); //append different task wrap <section>s to <main>

            $('#task-list-title').append('<option value="'+taskLists[i].id+'">'+taskLists[i].title+'</option>'); //append options to tasklist selection dropdown
            currentList = $('#task-list-title').val();

            getTasksFromList(taskLists[i].id); //bodge for accessing "i" variable from nested for loops
            function getTasksFromList(x){
                tasks.tasks.get(x,function(tasks){
                    
                    // ------------------------------------------ Append tasks to container ------------------------------------------
                    
                    if(tasks == undefined){return;} //simple fix for "tasks.length" is not defined error
                    for(var i=0; i < tasks.length; i++){
                        if(tasks[i].status == 'needsAction'){
                            $('#task-wrapper div#'+x).append(
                                '<article class="message" id="'+tasks[i].id+'">'+
                                    '<div class="message-body level">'+
                                        '<div class="level-item level-left">'+
                                            '<button onclick="completeTask(this)" class="button is-rounded is-success" style="margin-right: 20px;border-radius: 50%; width: 36px;"><i class="fas fa-check"></i></button>'+
                                            '<h1 id="task-title" class="subtitle is-4" contenteditable="true">'+tasks[i].title+'</h1>'+
                                        '</div>'+
                                        '<div class="level-item level-right">'+
                                            '<button onclick="deleteTask(this)" class="delete is-medium"></button>'+
                                        '</div>'+
                                    '</div>'+
                                '</article>'
                            );
                        }
                    }

                    // ------------------------------------------ Task name editing ------------------------------------------

                    var taskTitleEdits;
                    $('#task-title').focusin(function(){
                        taskTitleEdits = this.innerText;
                    });
                    $('#task-title').focusout(function(){
                        if(taskTitleEdits != this.innerText){
                            var taskID = this.parentNode.parentNode.parentNode.id;
                            var params = {'title':this.innerText}
                            tasks.tasks.edit(currentList, taskID, params);
                        }
                    });

                });
            }
        }

        $('div.container').hide(); //switch to first tasklist section
        $('div.container#'+taskLists[0].id).show();
    })
}

function createForms(){ //loads and sets up the "add task" and "add tasklist" forms

    // ------------------------------------------ Add Task Form ------------------------------------------

    $('#formSubmitTask').click(function(e){ //on click form submit button
        e.preventDefault();
        var t = {title: $('#formItemContentTask').val()};
        tasks.tasks.add(currentList, t, function(e) {
            $("#task-wrapper div#" + currentList).prepend('<article class="message" id="' + e.result.id + '"><div class="message-body level"><div class="level-item level-left"><button onclick="completeTask(this)" class="button is-rounded is-success" style="margin-right: 20px;border-radius: 50%; width: 36px;"><i class="fas fa-check"></i></button><h1 id="task-title" class="subtitle is-4" contenteditable="true">' + e.result.title + '</h1></div><div class="level-item level-right"><button onclick="deleteTask(this)" class="delete is-medium"></button></div></div></article>')
        });
        $('#formClose').click();
    });

    $('#openFormTask').click(function(){ //open form on click button
        $('form').fadeIn();
        $('main').css('filter', 'blur(5px)');
        $('#formTitleTask, #formItemTitleTask, #formItemContentTask, #formSubmitTask').show();
    });

    // ------------------------------------------ Add Tasklist Form ------------------------------------------

    $('#formSubmitList').click(function(e){
        e.preventDefault();
        tasks.taskLists.add($('#formItemContentList').val(), function(e) {
            location.reload();
        });
        location.reload();
    });

    
    $('#openFormList').click(function(){ //open the "add tasklist" form
        $('form').fadeIn();
        $('main').css('filter', 'blur(5px)');
        $('#formTitleList, #formItemTitleList, #formItemContentList, #formSubmitList').show();
    });

    $('#deleteTasklist').click(function(){ // delete currently selected tasklist
        tasks.taskLists.remove(currentList);
        location.reload();
    });

    // ------------------------------------------ All forms ------------------------------------------

    $('#formClose').click(function(){ //close form when clicking on the x button
        $('form').fadeOut();
        $('main').css('filter', 'blur(0px)');
        $('#formTitleTask, #formTitleList, #formItemTitleTask, #formItemTitleList, #formItemContentTask, #formItemContentList, #formSubmitTask, #formSubmitList').fadeOut();
    });
}

function completeTask(x){ //set task to completed
    tasks.tasks.complete(currentList, x.parentNode.parentNode.parentNode.id);
    $('#'+x.parentNode.parentNode.parentNode.id).fadeOut();
}

function deleteTask(x){ //set task to deleted
    tasks.tasks.edit(currentList, x.parentNode.parentNode.parentNode.id, {'deleted':'true'})
    $('#'+x.parentNode.parentNode.parentNode.id).animate({width:'toggle'},350, function(){ //funky animations
        $('#'+x.parentNode.parentNode.parentNode.id).hide();
    });
}   